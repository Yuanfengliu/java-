/*
异常：就是程序在运行时出现不正常的情况。  
异常的由来：问题也是现实生活中一个具体的事物，也可以通过java的类的形式进行描述。
			并封装成对象。其实就是java对不正常情况进行描述后的对象体现.

对于问题的划分：两种：一种是严重的问题，一种是不严重的问题

对于严重的：java通过Error类进行描述。（对于Error，一般不编写针对性的代码进行处理）
						（类型转换异常，数组角标越界异常，空指针异常等等，意思就是没救的，系统不会提示具体代码错误）
对于非严重的：java通过Exception类进行描述。（可以使用针对性的处理方式进行处理 ）

无论Error或者Exception都具有一些共性内容。
比如：不正常情况的信息，引发原因等。
throwable（有以下两种）
	|--Error
	|--Exception

2、异常的处理：java提供了特有的语句进行处理   
try
{
	需要被监测的代码；
}
catch(异常类 变量)
{
	处理异常代码；（处理方式）
}
finally
{
	一定会执行的语句；
}
3.对捕获到的异常对象进行常见的方法操作。
	String getMessage():获取异常信息函数（如下面的第60行）
	toString()：这就是获取异常对象的字符串变现形式，结果是异常名称和异常信息，都可在JDK API文档查看
	printStackTrace()：差找JDK API文档可知，是void型，没有返回值，故不用输出语句，直接调用此函数就可以，如63行
*/
class Demo
{
	int div(int a,int b)
	{
		return a/b;//出现错误时,出现new ArithmeticException()，给下面的catch函数处理
	}				//如果没有函数catch处理，虚拟机就自己处理，这样就睡出现之前提示的程序出错，
					  //马上停止程序进行，后面也就不会执行。
}
class ExceptionDemo7
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");
		Demo d=new Demo();
		try
		{
			int x=d.div(4,0);//可以试试把0改成1，看看结果是否一样
							//没有出错，则执行完下一句后，不会执行catch函数。
						//出现错误时,出现new ArithmeticException()，给下面的catch函数
			System.out.println("x="+x);	//上面出错，这句不会执行，直接跳到catch函数
		}
		catch (Exception e)//出现错误时，相当于Exception e=new ArithmeticException();
		{
			System.out.println("除零啦");
			System.out.println(e.getMessage());//结果是by zero
			System.out.println(e.toString());//出现的结果是  异常名称：异常信息
			System.out.println("--------------------");
			e.printStackTrace();//结果是：异常名称，异常信息，异常出现位置
								//其实JVM（虚拟机）的异常处理机制，就是在调用printStackTrace方法
								//多打印异常的堆栈的跟踪信息。
		}
		
		

		System.out.println("over");
	}
}
