/*
自定义异常：
项目中会出现特有的问题，而这些问题并未被java所描述并封装对象。
所以对于这些特有的问题可以按照java对问题封装的思想，将特有的问题。
进行自定义的异常封装。

需求：在本程序中，对于除数是-1，也视为错误的是无法进行运算的。
那么就需要对这个问题进行自定义的描述。

当在函数内部出现了throw抛出异常对象，那么就必须要给对应的处理动作。  
要么在内部try catch处理，要么在函数上声明让调用者处理。  

一般情况下，函数内出现异常，函数上需要声明。

发现打印的结果中只有异常的名称，缺没有异常的信息。
因为自定义的异常并未定义具体的信息。  

如何定义异常信息呢？
父类中已经把异常信息的操作都完成了。所以子类只要在构造时，
将异常信息传递给父类通过super语句。那么直接就可以通过getMessage方法获取自定义的异常。

自定义异常：
必须是自定义类继承Exception。原因是：
异常体系有一个特点：因为异常类和异常对象都被抛出。他们都具备可抛性。
这个可抛性是Throwable这个体系中的独有特点。只有这个体系中的类和对象才可以被throw和throws操作。

*/
/*
class FuShuException extends Exception//自己定义的负数异常要继承异常，这样系统才认识
{
	private String msg;
	FuShuException(String msg)
	{
		this.msg=msg;
	}
	public String getMessage()
	{
		return msg;
	}
}
*///29-40行可以改成43-50行，原因和98-116一样的道理
/*
class FuShuException extends Exception
{
	
	FuShuException(String msg)
	{
		super(msg);//传到父类，结果和上一种方法一样
	}	
}
*/
/************为了知道具体的错误是哪个可以将43-50改成53-65行这个样子*******************/
class FuShuException extends Exception		//自己定义的负数异常要继承异常，这样系统才认识
{	
	private int value;
	FuShuException(String msg,int value)
	{
		super(msg);//传到父类，结果和上一种方法一样
		this.value=value;
	}
	public int getValue()
	{
		return value;
	}
}
class Demo
{
	int div(int a,int b)throws FuShuException
	{
		if (b<0)
		{
			throw new FuShuException("出现除数是异常的情况------/by 负数",b);//手动通过throw关键字抛出一个自定义异常对象。
		}
		return a/b;
	}									  
}
class ExceptionDemo9
{
	public static void main(String[] args)
	{
		System.out.println("Hello World!");
		Demo d=new Demo();
		try
		{			
			int x=d.div(4,-2);
			System.out.println("x="+x);
		}		

		catch (FuShuException e)	
		{		
			System.out.println("除数出现负数了："+e.toString());//出现错误提示时，发现没有具体异常信息，因为这不是Java对此异常定义的，是自己定义的		
			System.out.println("错误的负数："+e.getValue());
		}
		System.out.println("over");
	}
}
/*
class Throwable
{
	private String message;
	Throwable(String getMessage)
	{
		this.message=message;
	}
	public String getMessage()
	{
		return message;
	}	
}
class Exception extends Throwable
{
	Exception(String message)
	{
		super(message);
	}
}
*/
/*
throws 和throw的区别：
throws使用在函数上(在这个符号')'和‘{’之间)。throw使用在函数内

throws后面跟的异常类，可以跟多个。用逗号隔开。
throw后面跟的是异常对象。
*/