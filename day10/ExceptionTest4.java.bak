/*异常――总结：
是什么：是对问题的描述。将问题进行对象的封装  
-----------------------------
异常体系：Throwable  
  			    |--Eroor  
    			|--Exception  
    				|--RuntimeException    

异常体系的特点：在异常体系中的所有类以及建立的对象都具备可抛性。
				也就是说可以被throw和throws关键字所操作。
				只有异常体系具备这个特点。

-------------------------------
throw和throws的用法：  

throw：定义在函数内，用于抛出异常对象   
throws：定义在函数上，用于抛出异常类，可以抛出多个用逗号隔开。 

当函数内有throw抛出异常对象，并未进行try处理。必须要在函数上声明，都在编译失败。  
注意：除了RuntimeException除外，函数内如果声明的是RuntimeException异常，函数上可以不用声明。

-------------------------------
如果函数声明了异常，调用者需要处理。处理方法可以throws或者可以try  

异常有两种：
1. 编译时被检测异常：该异常在编译时，如果没有处理（没有抛出也没try），编译失败。该异常被标识，代表这可以被处理。  
2. 运行时异常（编译时不检测）：在编译时不需要检测，编译器不检查。该异常的发生，建议不处理，让程序停止。需要对代码进行修正。 
-------------------------------
异常处理语句：
try
{
	需要被检测的代码；
}
catch（）
{
	处理异常的代码；
}
finally
{
	一定会执行的代码
}
有三种结合形式：
try
{
}
catch（）
{
}

try
{
}
finally
{
}

try
{
}
catch（）
{
}
finally
{
}

注意：
1、finally中定义的通常是：关闭资源代码。因为资源必须释放。
2、finally只有一种情况不被执行。当执行到System.exit(0)；finally不被执行 （系统推出，虚拟机结束，不会执行）
-------------------------------
自定义异常： 
	定义类继承Exception或者RuntimeException  
	1. 为了让该自定义类具备可抛性  
	2. 让该类具备异常操作的共性方法 

	当要自定义异常的信息时，可以使用父类已经定义好的功能。
	异常信息传递给父类的构造函数。
	class MyException extends Exception
	{
		MyException(String message)
		{
			super(message);
		}
}

自定义异常：按照java面向对象的思想，将程序中出现的特有问题进行封装。

-------------------------------
自定义异常好处：  
	1. 将问题进行封装  
	2. 将问题和代码进行分离，方便于阅读  

异常处理的原则：  
	1. 处理方式有两种：try或者throws  
	2. 调用到抛出异常的功能时，抛出几个，就处理几个  
	3. 多个catch，父类的catch放在最下面  
	4. catch内，需要定义针对性的处理方式。不要简单的定义printStackTrace输出语句，也不要不写。当捕捉到的异常，本功能处理不了时，可以继续在catch中抛出。  如果该异常处理不了，但并不属于该功能出现的异常。也可以将异常转换后再抛出和该功能相关的异常。  或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，让调用者知道，并处理。也可以捕获异常处理后，转换新的异常。

*/

class ExceptionTest4 
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");
	}
}
