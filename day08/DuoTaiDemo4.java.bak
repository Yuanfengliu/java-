/*


*/
class Fu
{
	int  num=5;
	void method1()
	{
		System.out.println("fu method_1");
	}
	void method2()
	{
		System.out.println("fu method_2");
	}
	static void method4()
	{
		System.out.println("fu method_4");
	}
}
class Zi extends Fu
{
	int num=8;
	void method1()
	{
		System.out.println("zi method_1");
	}
	void method3()
	{
		System.out.println("zi method_2");
	}
	static void method4()
	{
		System.out.println("zi method_4");
	}
}

class DuoTaiDemo4 
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");
		Fu f1=new Zi();
		System.out.println(f1.num);//结果是5
		Zi z1=new Zi();
		System.out.println(z1.num);//8

		System.out.println("----------------");
		Fu f2=new Zi();
		f2.method4();//结果是父类的方法四，解释见64和65
		Zi z2=new Zi();
		z2.method4();		
		System.out.println("----------------");

		Fu f=new Zi();
		f.method1();
		f.method2();
//		f.method3();//这个语句就不行了，因为父类那里没有方法三
/*
在多态中成员函数的特点：  
在编译时期：参阅引用型变量所属的类中是否有调用的方法，如果有，编译通过，如果没有，编译失败。
在运行时期：参阅对象所属的类中是否有调用的方法。  
简单总结就是：成员函数在多态调用时，编译看左边，运行看右边。（就是等号的左边或者右边表达式是什么的意思）


在多态中，成员变量的特点：无论编译还是运行，都参考左边（引用型变量所属的类）。 （看42到46那几行） 
在多态中，静态成员函数的特点：无论编译还是运行，都参考左边（引用型变量所属的类）。
*/

/**********以下四行是可以这样做的********/
//		Zi z=new Zi();
//		z.method1();
//		z.method2();
//		z.method3();

	
	}
}
