class Suanshu 
{
	public static void main(String[] args) 
	{
		System.out.println(1*5);
		System.out.println("-1%5");
		int a=3,c,b;
		b=a++;
		//c=++a;
		System.out.println("b="+b);
		System.out.println("a="+a);
		System.out.print("看看ln删除有什么效果");//ln 代表换行的意思，
		System.out.println("haha");
		System.out.println("看看用+号有什么效果: "+"5+5"+5+5);//结果是5+555
		//字符串数据和任何数据使用 + 都是相连接，最终都会变成字符串
		//字符串里面是最直接的，里面是什么就是什么
		/*
		转义字符：通过 \ 来表示变换后面字母或者符号的含义
		\n：换行
		\b：退格.相当于backspace
		\r:按下回车键。window系统中，回车符是由两个字符来表示:\r\n
		\t：制表符。相当于tab键
		*/
		System.out.println("liuyuan \n feng");
		System.out.println("\"liuyuanfeng\""); //用反斜杠转义一个字符，这样才能显示出字符双影号
		char d;
		d='峰';//一个汉字两个字节，一个char也是两个字节。
		System.out.println("d="+d);
		short s=4;
//s=s+5;//30行与32行的区别就是：30是两次运算，5是int型，s是short型，不能这样相加直接赋值；
//32行一次运算，左右两次相加赋值给左边（有个自动转换的功能）。30行这样算是错的，32行这样才对。
		s+=5;
		System.out.println("s="+s);

		/*
		&与 |或 ^异或
		&与&&的区别：例如：int a=2；  a>3&&a<5;这时，当算到a>3是假的时候，右边不运算
		总结：&表示：无论左边是ture还是false，右边都运算
				&&便是：当左边为false时，右边不运算。

		|:两边都运算
		||:当左边为ture时，右边不运算。
		*/
		/*
		位运算符：3<<2=12  左移两位；
		发现：1：左移'<<'代表乘以2的倍数（如左移3位就是8倍）
			2：同理右移'>>'就是除以2的几次幂(右移时，要看原来最高位
				是什么，左边就补什么，注意一下负数就行)；
			3：>>>代表是：无论最高位是什么，右移时后，都用0补。

		*/
		/*同一个数异或两次，结果还是那个数（如：7^4^4=7）*/
		/*****位运算符*************************************
			两个变量交换值？如：n=3，m=8，经过变换使得m=3，n=8
			解：方法1：
						加入第三变量，
				方法2：n=n+m;	(这种方法的缺点是：n和m的值很大的话，
						m=n-m;		结果容易超出int的范围）
						n=n-m;
				方法3：n=n^m;(这种方法比较有技巧性)
						m=n^m;//(n^m)^m=n
						n=n^m;//(n^m)^n=m
		*/
		/********三元运算符
			int x=1，y；
			y=（x>1）?100:200;表示（）里是真的，等于100；假的就等于200
		*/
	}
}
