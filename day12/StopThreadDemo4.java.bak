/*
stop 方法已经过时。

如何停止线程？
只有一种方法，

特殊情况：
当线程处于冻结状态
就不会读取到标记，那么线程就不会结束。

当没有指定的方式让冻结的线程恢复到运行状态时，这时需要对冻结进行清除。
强制让线程恢复到运行状态中来。这样就可以操作标记让线程结束。

Thread 类提供该方法 interrupt();

join:
当A线程执行到了B线程的.join()方法时，A就会等待。等B线程都执行完，A才会执行。

join可以用来临时加入线程执行。

getName()
toString()：可以显示出优先级等信息
*/

class StopThread implements Runnable
{
	private boolean flag=true;
	public synchronized void run()
	{
		while(flag)
		{
			try
			{
				wait();
			}
			catch (InterruptedException e)
			{
				System.out.println(Thread.currentThread().getName()+".....Exception");
				flag=false;
			}
			System.out.println(Thread.currentThread().toString()+"....run");
		}
	}
	public void changeFlag()
	{
		flag=false;
	}
}
class StopThreadDemo4 
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");

		StopThread st =new StopThread();
		
		Thread t1=new Thread(st);
		Thread t2=new Thread(st);
		
		t1.start();
		t1.setPriority(Thread.MAX_PRIORITY);//吧优先级调到最大，默认是5，最大是10
		t2.start();

		int num=0;
		while (true)
		{
			if (num++ == 60)
			{
				//st.changeFlag();
				t1.interrupt();
				t2.interrupt();

				break;
			}
			System.out.println(Thread.currentThread().getName()+"......."+num);
		}
		System.out.println("over");
	}
}
